---

---

<div class="stats stats-vertical shadow">
  <div class="stat">
    <div class="stat-title">Current zoom level</div>
    <div id="stats-zoom" class="stat-value">0</div>
    <div id="stats-zoom-progress" class="stat-desc">0/?</div>
  </div>

  <div class="stat">
    <div class="stat-title">Progress</div>
    <div id="stats-progress-text" class="stat-value">0%</div>
    <progress
      id="stats-progress"
      class="progress progress-secondary w-56"
      value="0"
      max="100"></progress>
  </div>

  <div class="stat">
    <div class="stat-title">Tile count</div>
    <div id="stats-tile-count" class="stat-value">0</div>
    <div id="stats-tile-count-progress" class="stat-desc">0/?</div>
  </div>

  <div class="stat">
    <div class="stat-title">Processing time</div>
    <div id="stats-processing-time" class="stat-value">0s</div>
    <div id="stats-processing-speed" class="stat-desc">0 tiles/s</div>
  </div>
</div>
<script>
  import {
    statsStore,
    settingsStore,
    inputSVG,
    processing,
  } from "../lib/store";
  import {
    computeFinalTileCount,
    humanCount,
    humanDuration,
  } from "../lib/utils";

  // Update stats based on settings change
  const updateFinalTileCount = () => {
    const svg = inputSVG.get();
    if (svg instanceof SVGSVGElement) {
      statsStore.finalTilesCount.set(
        computeFinalTileCount(
          settingsStore.tileSize.get(),
          settingsStore.maxZoomLevel.get(),
          {
            width: svg.width.baseVal.value,
            height: svg.height.baseVal.value,
          },
        ),
      );
    }
  };
  settingsStore.maxZoomLevel.subscribe(updateFinalTileCount);
  settingsStore.tileSize.subscribe(updateFinalTileCount);
  inputSVG.subscribe(updateFinalTileCount);

  const statsCurrentZoom = document.getElementById("stats-zoom");
  statsStore.currentZoom.subscribe((currentZoom) => {
    statsCurrentZoom!.innerText = `${currentZoom}`;
  });

  const statsCurrentZoomProgress = document.getElementById(
    "stats-zoom-progress",
  );
  settingsStore.maxZoomLevel.subscribe((maxZoomLevel) => {
    statsCurrentZoomProgress!.innerText = ` / ${maxZoomLevel}`;
  });

  const statsProgressText = document.getElementById("stats-progress-text");
  const statsProgress = document.getElementById(
    "stats-progress",
  ) as HTMLProgressElement;

  statsStore.progress.subscribe((progress) => {
    statsProgressText!.innerText = `${progress.toFixed(1)}%`;
    statsProgress.value = progress;
  });

  const statsTileCount = document.getElementById("stats-tile-count");
  statsStore.tileCount.subscribe((tileCount) => {
    statsTileCount!.innerText = `${humanCount(tileCount)}`;
  });

  const statsTileCountProgress = document.getElementById(
    "stats-tile-count-progress",
  );
  statsStore.finalTilesCount.subscribe((finalTilesCount) => {
    statsTileCountProgress!.innerText = ` / ${humanCount(finalTilesCount)}`;
  });

  let processingT0 = new Date();
  const statsProcessingTime = document.getElementById("stats-processing-time")!;
  const statsProcessingSpeed = document.getElementById(
    "stats-processing-speed",
  )!;

  const updateProcessingStats = () => {
    const processingTime =
      (new Date().getTime() - processingT0.getTime()) / 1000;
    statsProcessingTime.innerText = humanDuration(processingTime);
    const processingSpeed = Math.round(
      statsStore.tileCount.get() / processingTime,
    );
    statsProcessingSpeed.innerText = `${humanCount(processingSpeed)} tiles/s`;

    if (processing.get()) {
      setTimeout(updateProcessingStats, 900);
    }
  };

  processing.subscribe((isProcessing) => {
    if (isProcessing) {
      processingT0 = new Date();
      updateProcessingStats();
    }
  });
</script>
