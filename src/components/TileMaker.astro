<div
  id="svg-container"
  class="absolute invisible overflow-hidden top-0 left-0 w-screen h-screen -z-50"
>
</div>
<script>
  import JSZip from "jszip";
  import TileMaker from "../lib/tilemaker";
  import { saveBlob } from "../lib/utils";
  import {
    inputSVG,
    processing,
    settingsStore,
    statsStore,
  } from "../lib/store";

  const svg_container = document.getElementById(
    "svg-container",
  ) as HTMLDivElement;

  processing.subscribe(async (started) => {
    if (!started) return;
    const svg = inputSVG.get();
    if (!(svg instanceof SVGSVGElement)) {
      console.error("Started processing without valid SVG");
      return;
    }

    svg_container.appendChild(inputSVG.get()!);

    console.log("Creating tiles...");

    const tile_storage = new Map<string, SVGSVGElement>();
    const tilemaker = new TileMaker(svg, tile_storage, {
      tileSize: settingsStore.tileSize.get(),
      maxZoomLevel: settingsStore.maxZoomLevel.get(),
      removeSmall: settingsStore.removeSmall.get(),
      keepFinal: settingsStore.keepFinal.get(),
    });
    const tiles = await tilemaker.createTiles(
      svg,
      settingsStore.maxZoomLevel.get(),
    );

    // Save to zip
    console.log("Saving to zip...");
    const zip = new JSZip();
    for (const [key, tile] of tiles) {
      tile instanceof SVGSVGElement
        ? zip.file(key, tile.outerHTML)
        : zip.file(key, tile);
    }
    // Add metadata
    zip.file(
      "meta.json",
      JSON.stringify(
        {
          maxZoomLevel: settingsStore.maxZoomLevel.get(),
          tileSize: settingsStore.tileSize.get(),
        },
        undefined,
        2,
      ),
    );
    console.log("Saved to zip");

    const blob = await zip.generateAsync({ type: "blob" });
    statsStore.outputSize.set(blob.size);

    saveBlob(blob, "tiles.zip");
  });
</script>
