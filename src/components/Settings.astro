---

---

<div class="prose w-[80%] p-12">
  <h1>Settings</h1>
  <h2>Max zoom level</h2>
  <input
    id="max-zoom-input"
    type="range"
    min="0"
    max="90"
    value="10"
    class="range range-primary"
    step="10"
  />
  <div class="flex justify-between text-xs px-2">
    <span>0</span>
    <span>1</span>
    <span>2</span>
    <span>3</span>
    <span>4</span>
    <span>5</span>
    <span>6</span>
    <span>7</span>
    <span>8</span>
    <span>9</span>
  </div>
  <h2>Tile size</h2>
  <select id="tile-size-select" class="select select-bordered w-full max-w-xs">
    <option value="128">128x128px</option>
    <option value="256" selected>256x256px</option>
    <option value="512">512x512px</option>
    <option value="1024">1024x1024px</option>
    <option value="2048">2048x2048px</option>
    <option value="4096">4096x4096px</option>
  </select>
  <h2>Extras</h2>
  <div class="form-control">
    <label class="label cursor-pointer">
      <span class="label-text">Include everything on final zoom layer</span>
      <input
        id="keep-final-input"
        type="checkbox"
        class="toggle toggle-success"
        checked
      />
    </label>
  </div><div class="form-control">
    <label class="label cursor-pointer">
      <span class="label-text">Remove small elements</span>
      <input
        id="remove-small-input"
        type="checkbox"
        class="toggle toggle-success"
        checked
      />
    </label>
  </div>
</div>
<script>
  import { settingsStore, processing } from "../lib/store";

  const maxZoomInput = document.getElementById(
    "max-zoom-input",
  ) as HTMLInputElement;
  maxZoomInput.value = `${10 * (settingsStore.maxZoomLevel.get() - 1)}`;
  maxZoomInput.addEventListener("change", (_e) => {
    let maxZoom = parseInt(maxZoomInput.value) / 10;
    settingsStore.maxZoomLevel.set(maxZoom);
  });

  const tileSizeSelect = document.getElementById(
    "tile-size-select",
  ) as HTMLSelectElement;
  let index = 0;
  for (const option of tileSizeSelect.options) {
    if (parseInt(option.value) == settingsStore.tileSize.get()) {
      tileSizeSelect.options.selectedIndex = index;
      break;
    }

    index++;
  }
  tileSizeSelect.addEventListener("change", (_e) => {
    const tileSize = tileSizeSelect.options.item(
      tileSizeSelect.selectedIndex,
    )!.value;
    settingsStore.tileSize.set(parseInt(tileSize));
  });

  const keepFinalInput = document.getElementById(
    "keep-final-input",
  ) as HTMLInputElement;
  keepFinalInput.checked = settingsStore.keepFinal.get();
  keepFinalInput.addEventListener("change", (_e) => {
    settingsStore.keepFinal.set(keepFinalInput.checked);
  });

  const removeSmallInput = document.getElementById(
    "remove-small-input"
  ) as HTMLInputElement;
  removeSmallInput.checked = settingsStore.removeSmall.get();
  removeSmallInput.addEventListener("change", (_e) => {
    settingsStore.removeSmall.set(removeSmallInput.checked);
  });

  processing.subscribe((isProcessing) => {
    maxZoomInput.disabled = isProcessing;
    tileSizeSelect.disabled = isProcessing;
    keepFinalInput.disabled = isProcessing;
    removeSmallInput.disabled = isProcessing;
  });
</script>
